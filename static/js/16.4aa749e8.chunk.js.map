{"version":3,"file":"static/js/16.4aa749e8.chunk.js","mappings":"+LAEaA,E,QAAYC,GAAAA,EAAH,kFACX,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,GAAnB,I,UCEG,SAASC,EAAT,GAA8B,IAATC,EAAQ,EAARA,KAClC,OACE,SAAC,KAAD,CACEA,KAAMA,EACNC,OAAQ,SAAAC,GAAO,OAAI,SAACT,EAAD,UAAYS,GAAhB,GAGpB,C,8ICJKC,EAAgB,CACpBH,KAAM,GACNI,MAAO,GACPC,SAAU,IAGNC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CR,KAAMO,EAAAA,KAEHE,KAAK,+DACLC,QAAO,GAEVN,MAAOG,EAAAA,KAEJH,MAAM,yBACNO,SAAS,4BAEZN,SAAUE,EAAAA,KAEPE,KAAK,+DACLC,QAAO,GACPE,IAAI,EAAG,sDACPD,SAAS,iCAGC,SAASE,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAQjB,OACE,SAAC,KAAD,CACEZ,cAAeA,EACfG,iBAAkBA,EAClBU,SAViB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BC,QAAQC,IAAIH,GACZH,GAASO,EAAAA,EAAAA,IAASJ,IAClBC,GACD,EAGC,UAKE,UAAC,KAAD,CAAYI,aAAa,MAAzB,WACE,UAAC,KAAD,uBAEE,SAAC,KAAD,CAAOC,KAAK,OAAOvB,KAAK,aAE1B,SAACD,EAAA,EAAD,CAAWC,KAAK,UAEhB,UAAC,KAAD,oBAEE,SAAC,KAAD,CAAOuB,KAAK,QAAQvB,KAAK,cAE3B,SAACD,EAAA,EAAD,CAAWC,KAAK,WAEhB,UAAC,KAAD,uBAEE,SAAC,KAAD,CAAOuB,KAAK,WAAWvB,KAAK,iBAE9B,SAACD,EAAA,EAAD,CAAWC,KAAK,cAEhB,SAAC,KAAD,CAAcuB,KAAK,SAAnB,0BAIP,C,cCpEc,SAASC,IACtB,OACE,4BACE,SAACC,EAAA,EAAD,WACE,+CAEF,SAACZ,EAAD,MAGL,C,mLCPYa,GAAahC,EAAAA,EAAAA,IAAOiC,EAAAA,GAAPjC,CAAH,4DAKVkC,EAAQlC,EAAAA,GAAAA,MAAH,0HAGD,SAAAC,GAAC,OAAIA,EAAEC,MAAMiC,YAAYC,QAAxB,IACF,SAAAnC,GAAC,OAAIA,EAAEC,MAAMmC,MAAM,EAAlB,IACN,SAAApC,GAAC,OAAIA,EAAEC,MAAMC,OAAOmC,IAAnB,IAGCC,GAAQvC,EAAAA,EAAAA,IAAOwC,EAAAA,GAAPxC,CAAH,8LAEH,SAAAC,GAAC,OAAIA,EAAEC,MAAMuC,UAAUC,CAAtB,IACH,SAAAzC,GAAC,OAAIA,EAAEC,MAAMmC,MAAM,EAAlB,IAGF,SAAApC,GAAC,OAAIA,EAAEC,MAAMyC,QAAQC,MAApB,IAA8B,SAAA3C,GAAC,OAAIA,EAAEC,MAAMC,OAAOmC,IAAnB,IACzB,SAAArC,GAAC,OAAIA,EAAEC,MAAM2C,MAAMD,MAAlB,IAIPE,GAAe9C,EAAAA,EAAAA,IAAO+C,EAAAA,EAAP/C,CAAH,gEAER,SAAAC,GAAC,OAAIA,EAAEC,MAAMmC,MAAM,EAAlB,G","sources":["components/FormError/FormError.styles.jsx","components/FormError/FormError.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register/Register.js","shared/FormikForm/FormikForm.styles.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ErrorText = styled.p`\n  color: ${p => p.theme.colors.bad};\n  text-align: left;\n  margin: 4px 0 8px;\n`;\n","import { ErrorMessage } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { ErrorText } from './FormError.styles';\n\nexport default function FormError({ name }) {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n}\n\nFormError.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n","import { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\n\nimport * as yup from 'yup';\nimport FormError from 'components/FormError/FormError';\nimport { Input, Label, StyledButton, StyledForm } from 'shared/FormikForm/FormikForm.styles';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst validationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .trim('The contact name cannot include leading and trailing spaces')\n    .strict(true),\n\n  email: yup\n    .string()\n    .email('Email must be a valid')\n    .required('Please fill in the email'),\n\n  password: yup\n    .string()\n    .trim('The contact name cannot include leading and trailing spaces')\n    .strict(true)\n    .min(6, 'Password is too short - should be 6 chars minimum.')\n    .required('Please fill in the password'),\n});\n\nexport default function RegisterForm() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    console.log(values);\n    dispatch(register(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      <StyledForm autoComplete=\"off\">\n        <Label>\n          Username\n          <Input type=\"text\" name=\"name\" />\n        </Label>\n        <FormError name=\"name\" />\n\n        <Label>\n          Email\n          <Input type=\"email\" name=\"email\" />\n        </Label>\n        <FormError name=\"email\" />\n\n        <Label>\n          Password\n          <Input type=\"password\" name=\"password\" />\n        </Label>\n        <FormError name=\"password\" />\n\n        <StyledButton type=\"submit\">Register</StyledButton>\n      </StyledForm>\n    </Formik>\n  );\n}\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\nimport { Helmet } from 'react-helmet';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}\n","import styled from 'styled-components';\nimport { Field, Form } from 'formik';\n\nimport { Button } from 'shared/Button/Button.styles';\n\nexport const StyledForm = styled(Form)`\n  width: 320px;\n  margin: 0 auto;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  text-align: left;\n  font-weight: ${p => p.theme.fontWeights.semibold};\n  margin-top: ${p => p.theme.space[4]}px;\n  color: ${p => p.theme.colors.text};\n`;\n\nexport const Input = styled(Field)`\n  width: 100%;\n  font-size: ${p => p.theme.fontSizes.s};\n  padding: ${p => p.theme.space[2]}px 4px;\n  margin-top: 6px;\n  outline: none;\n  border: ${p => p.theme.borders.normal} ${p => p.theme.colors.text};\n  border-radius: ${p => p.theme.radii.normal};\n  box-sizing: border-box;\n`;\n\nexport const StyledButton = styled(Button)`\n   width: 100%;\n   margin-top: ${p => p.theme.space[4]}px;\n`"],"names":["ErrorText","styled","p","theme","colors","bad","FormError","name","render","message","initialValues","email","password","validationSchema","yup","shape","trim","strict","required","min","RegisterForm","dispatch","useDispatch","onSubmit","values","resetForm","console","log","register","autoComplete","type","Register","Helmet","StyledForm","Form","Label","fontWeights","semibold","space","text","Input","Field","fontSizes","s","borders","normal","radii","StyledButton","Button"],"sourceRoot":""}